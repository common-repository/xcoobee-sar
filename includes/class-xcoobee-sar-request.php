<?php
/**
 * The XcooBee_SAR_Request class.
 *
 * @package XcooBee/SAR
 */

// Exit if accessed directly.
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}

use XcooBee\Core\Encryption as Sdk_Encryption;
use XcooBee\Exception\EncryptionException as Sdk_EncryptionException;

include_once( ABSPATH . 'wp-admin/includes/privacy-tools.php' );

/**
 * Request data.
 *
 * @since 1.0.0
 */
class XcooBee_SAR_Request {
	/**
	 * The constructor.
	 *
	 * @since 1.0.0
	 */
	public function __construct() {
		add_action( 'xbee_endpoint_webhook', [ $this, 'handle_sar' ], 10, 2 );
		add_action( 'wp_privacy_personal_data_export_file', 'wp_privacy_generate_personal_data_export_file', 10 );
	}

	/**
	 * Handles an SAR.
	 *
	 * @since 1.1.0
	 * @param string $payload Event payload.
	 */
	public function handle_sar( $headers, $payload ) {
		if ( ! isset( $headers['Xbee-Event'] ) || 'UserDataRequest' !== $headers['Xbee-Event'] ) {
			return;
		}

		include_once ABSPATH . 'wp-admin/includes/file.php';

		// Decrypt payload.
		if ( ! empty($payload) ) {
			try {
				$xcoobee = XcooBee::get_xcoobee( true );
				$encryption = new Sdk_Encryption( $xcoobee );
				$payload = $encryption->decrypt( $payload );
			} catch ( Sdk_EncryptionException $e ) {
				$payload = null;
			}
		}

		// Encrypted or invalid payload.
		if ( $payload === null ) {
			return;
		}

		$payload = json_decode( $payload );

		$consent_id  = $payload->consentId;
		$request_ref = $payload->requestRef;
		$xid         = $payload->xcoobeeId;
		$email       = $payload->email;

		$user = get_user_by( 'email', $email );

		// If user could not be found by email, look for XcooBee Id.
		if ( ! $user ) {
			$user_id = xbee_get_user_by_xid( $xid );

			// Send fallback message if user not found.
			if ( is_null( $user_id ) ) {
				try {
					$xcoobee = XcooBee::get_xcoobee( true );
					$response = $xcoobee->consents->setUserDataResponse(
						__( 'Subject Access Request', 'xcoobee' ),
						$request_ref,
						XBEE_SAR_ABSPATH . 'assets/dist/files/sar_fallback.txt',
						XcooBee::get_endpoint(),
						'xbee_sar_data_response_handler'
					);
				} catch ( Exception $e ) {
					wp_send_json( (object) [
						'result' => false,
						'status' => 'error',
						'code'   => 'error_set_user_data_response',
						'errors' => $response->errors,
					] );
				}

				// Then, exit.
				return;
			}

			// Get the registered email address.
			$user = get_user_by( 'id', $user_id );
			$email = $user->user_email;
		}

		$request_id = wp_create_user_request( $email, 'export_personal_data' );

		if ( is_wp_error( $request_id ) ) {
			$requests_query = new WP_Query(
				array(
					'post_type'     => 'user_request',
					'post_name__in' => [ 'export_personal_data' ],
					'post_status'   => 'any',
					'fields'        => 'ids',
					'post_author'   => $user_id,
				)
			);

			$request_id = $requests_query->posts[0];
		}

		// Create personal data file.
		wp_privacy_generate_personal_data_export_file( $request_id );
		$exporters = apply_filters( 'wp_privacy_personal_data_exporters', array() );
		$exporters_count = count( $exporters );
		$response = $this->do_next_export( $request_id, $exporters_count, 1, 1 );

		// Update request status.
		global $wpdb;
		$wpdb->update( $wpdb->posts, array( 'post_status' => 'request-completed' ), array( 'ID' => $request_id ) );
		$data_file = get_post_meta( $request_id, '_export_file_path', true );

		$file_path = rtrim( $data_file, '.zip' );
		$file_name = basename( $file_path );

		WP_Filesystem();
		$destination = wp_upload_dir();
		$destination_path = $destination['basedir'] . '/wp-personal-data-exports/' . $file_name;

		// Unzip data file generated by WordPress.
		$unzip_data_file = unzip_file( $data_file, $destination_path );
		if ( is_wp_error( $unzip_data_file ) ) {
			return;
		}

		// Rename file from index.html to sar_request_site.com.html
		$data_file = rtrim( $data_file, '.zip' ) . '/index.html';
		$data_file_renamed = rtrim( $data_file, 'index.html' ) . 'sar_request_' . parse_url( get_site_url() )['host'] . '.html';
		rename( $data_file, $data_file_renamed );
		$data_file = $data_file_renamed;

		update_post_meta( $request_id, 'xbee_sar_xid', $xid );

		try {
			$xcoobee = XcooBee::get_xcoobee( true );
			$response = $xcoobee->consents->setUserDataResponse(
				__( 'Subject Access Request', 'xcoobee' ),
				$request_ref,
				$data_file,
				XcooBee::get_endpoint(),
				'xbee_sar_data_response_handler'
			);

			if ( 200 === $response->code ) {
				// Update request status.
				update_post_meta( $request_id, 'xbee_sar_status', [ 'status' => 'sent', 'date' => time() ] );
				update_post_meta( $request_id, 'xbee_sar_user_reference', $response->request_id );
			} else {
				update_post_meta( $request_id, 'xbee_sar_status', [ 'status' => 'error', 'date' => time() ] );	
			
				wp_send_json( (object) [
					'result' => false,
					'status' => 'error',
					'code'   => 'error_set_user_data_response',
					'errors' => $response->errors,
				] );
			}
		} catch ( Exception $e ) {
			update_post_meta( $request_id, 'xbee_sar_status', [ 'status' => 'error', 'date' => time() ] );

			wp_send_json( (object) [
				'result' => false,
				'status' => 'error',
				'code'   => 'error_set_user_data_response',
				'errors' => $response->errors,
			] );
		}
	}

	/**
	 * Retrieve user personal data.
	 *
	 * @since 1.2.1
	 *
	 * @param int $request_id
	 * @param int $page_index
	 * @param int $exporter
	 *
	 * @return array
	 */
	protected function get_personal_data( $request_id, $exporter_index, $page_index ) {
		if ( empty( $request_id ) ) {
			return array(
				'success' => false,
				'data'    => __( 'Missing request ID.', 'xcoobee' ),
			);
		}

		if ( ! isset( $exporter_index ) ) {
			return array(
				'success' => false,
				'data'    => __( 'Missing exporter index.', 'xcoobee' ),
			);
		}

		if ( ! isset( $page_index ) ) {
			return array(
				'success' => false,
				'data'    => __( 'Missing page index.', 'xcoobee' ),
			);
		}

		if ( $request_id < 1 ) {
			return array(
				'success' => false,
				'data'    => __( 'Invalid request ID.', 'xcoobee' ),
			);
		}

		// Get the request data.
		$request = wp_get_user_request_data( $request_id );

		if ( ! $request ) {
			return array(
				'success' => false,
				'data'    => __( 'Invalid request type.', 'xcoobee' ),
			);
		}

		$email_address = $request->email;
		if ( ! $request ) {
			return array(
				'success' => false,
				'data'    => __( 'A valid email address must be given.', 'xcoobee' ),
			);
		}

		/** This filter is documented in wp-admin/includes/ajax-actions.php */
		$exporters = apply_filters( 'wp_privacy_personal_data_exporters', array() );

		if ( ! is_array( $exporters ) ) {
			return array(
				'success' => false,
				'data'    => __( 'An exporter has improperly used the registration filter.', 'xcoobee' ),
			);
		}

		// Do we have any registered exporters?
		if ( 0 < count( $exporters ) ) {
			if ( $exporter_index < 1 ) {
				return array(
					'success' => false,
					'data'    => __( 'Exporter index cannot be negative.', 'xcoobee' ),
				);
			}

			if ( $exporter_index > count( $exporters ) ) {
				return array(
					'success' => false,
					'data'    => __( 'Exporter index is out of range.', 'xcoobee' ),
				);
			}

			if ( $page_index < 1 ) {
				return array(
					'success' => false,
					'data'    => __( 'Page index cannot be less than one.', 'xcoobee' ),
				);
			}

			$exporter_keys = array_keys( $exporters );
			$exporter_key  = $exporter_keys[ $exporter_index - 1 ];
			$exporter      = $exporters[ $exporter_key ];

			if ( ! is_array( $exporter ) ) {
				return array(
					'success' => false,
					/* translators: %s: exporter array index */
					'data'    => sprintf( __( 'Expected an array describing the exporter at index %s.', 'xcoobee' ), $exporter_key ),
				);
			}

			if ( ! array_key_exists( 'exporter_friendly_name', $exporter ) ) {
				return array(
					'success' => false,
					/* translators: %s: exporter array index */
					'data'    => sprintf( __( 'Exporter array at index %s does not include a friendly name.', 'xcoobee' ), $exporter_key )
				);
			}

			$exporter_friendly_name = $exporter['exporter_friendly_name'];

			if ( ! array_key_exists( 'callback', $exporter ) ) {
				return array(
					'success' => false,
					/* translators: %s: exporter friendly name */
					'data'    => sprintf( __( 'Exporter does not include a callback: %s.', 'xcoobee' ), esc_html( $exporter_friendly_name ) )
				);
			}
			if ( ! is_callable( $exporter['callback'] ) ) {
				return array(
					'success' => false,
					/* translators: %s: exporter friendly name */
					'data'    => sprintf( __( 'Exporter callback is not a valid callback: %s.', 'xcoobee' ), esc_html( $exporter_friendly_name ) )
				);
			}

			$callback = $exporter['callback'];
			$response = call_user_func( $callback, $email_address, $page_index );

			if ( is_wp_error( $response ) ) {
				return array(
					'success' => false,
					'data'    => $response->get_error_message(),
				);
			}

			if ( ! is_array( $response ) ) {
				return array(
					'success' => false,
					/* translators: %s: exporter friendly name */
					'data'    => sprintf( __( 'Expected response as an array from exporter: %s.', 'xcoobee' ), esc_html( $exporter_friendly_name ) )
				);
			}
			if ( ! array_key_exists( 'data', $response ) ) {
				return array(
					'success' => false,
					/* translators: %s: exporter friendly name */
					'data'    => sprintf( __( 'Expected data in response array from exporter: %s.', 'xcoobee' ), esc_html( $exporter_friendly_name ) )
				);
			}
			if ( ! is_array( $response['data'] ) ) {
				return array(
					'success' => false,
					/* translators: %s: exporter friendly name */
					'data'    => sprintf( __( 'Expected data array in response array from exporter: %s.', 'xcoobee' ), esc_html( $exporter_friendly_name ) )
				);
			}
			if ( ! array_key_exists( 'done', $response ) ) {
				return array(
					'success' => false,
					/* translators: %s: exporter friendly name */
					'data'    => sprintf( __( 'Expected done (boolean) in response array from exporter: %s.', 'xcoobee' ), esc_html( $exporter_friendly_name ) )
				);
			}
		} else {
			// No exporters, so we're done.
			$exporter_key = '';

			$response = array(
				'data' => array(),
				'done' => true,
			);
		}

		$send_as_email = false;

		/** This filter is documented in wp-admin/includes/ajax-actions.php */
		$response = apply_filters( 'wp_privacy_personal_data_export_page', $response, $exporter_index, $email_address, $page_index, $request_id, $send_as_email, $exporter_key );
		$response = wp_privacy_process_personal_data_export_page( $response, $exporter_index, $email_address, $page_index, $request_id, $send_as_email, $exporter_key );

		if ( is_wp_error( $response ) ) {
			return array(
				'success' => false,
				'data'    => $response
			);
		}

		return array(
			'success' => true,
			'data'    => $response
		);
	}

	/**
	 * A clone of doNextExport() in wp-admin/js/xfn.js.
	 *
	 * @since 1.2.1
	 *
	 * @param int $request_id
	 * @param int $exporters_count
	 * @param int $exporter_index
	 * @param int $page_index
	 */
	protected function do_next_export( $request_id, $exporters_count, $exporter_index, $page_index ) {
		$response = $this->get_personal_data( $request_id, $exporter_index, $page_index );
		$success  = $response['success'];
		$data     = $response['data'];

		if ( $success ) {
			if ( ! $data['done'] ) {
				return $this->do_next_export( $request_id, $exporters_count, $exporter_index, $page_index + 1 );
			} else {
				if ( $exporter_index < $exporters_count ) {
					return $this->do_next_export( $request_id, $exporters_count, $exporter_index + 1, 1 );
				} else {
					return array(
						'success' => true,
						'data'    => $data
					);
				}
			}
		} else {
			return array(
				'success' => false,
				'data'    => $data
			);
		}
	}
}

new XcooBee_SAR_Request;
